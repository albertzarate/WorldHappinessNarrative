(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          countries: topojson.feature(topology, countries),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl =
    'https://raw.githubusercontent.com/albertzarate/WorldHappinessNarrative/master/data/world_happiness_2021.csv';

  const row = d => {
    d.Score = +d['Score'];
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const csvUrl$1 =
    'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.csv';

  const useCodes = () => {
    const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      d3.csv(csvUrl$1).then(setData);
    }, []);

    return data;
  };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();

  const missingDataColor = 'lightgray';

  const Marks = ({
    worldAtlas: { countries, interiors },
    rowByNumericCode,
    colorScale,
    colorValue
  }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      countries.features.map(feature => {
        const d = rowByNumericCode.get(feature.id);
        if(!d){
          console.log(feature.properties.name);
        }
        return (
          React.createElement( 'path', {
            fill: d ? colorScale(colorValue(d)) : missingDataColor, d: path(feature) })
        );
      }),
      React.createElement( 'path', { className: "interiors", d: path(interiors) })
    )
  );

  const width = 1200;
  const height = 750;
  const margin = { top: 60, right: 30, bottom: 65, left: 85 };
  const App = () => {
    const worldAtlas = useWorldAtlas();
    const data = useData();
    const codes = useCodes();

    if (!worldAtlas || !data || !codes) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    const numericCodeByAlphaCode = new Map();
    codes.forEach(code => {
      const alpha3Code = code['alpha-3'];
      const numericCode = code['country-code'];
      numericCodeByAlphaCode.set(alpha3Code, numericCode);
    });
    
    const rowByNumericCode = new Map();
    data.forEach(d => {
      const alpha3Code = d.Code;
      const numericCode = numericCodeByAlphaCode.get(alpha3Code);
      rowByNumericCode.set(numericCode, d);
    });

    const colorValue = d => d.Score;

    const colorScale = d3.scaleSequential(d3.interpolateSpectral).domain([
      4,
      d3.max(data, colorValue)
    ]);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( Marks, {
            worldAtlas: worldAtlas, rowByNumericCode: rowByNumericCode, colorScale: colorScale, colorValue: colorValue })
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,