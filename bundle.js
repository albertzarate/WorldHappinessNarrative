(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          countries: topojson.feature(topology, countries),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl =
    'https://raw.githubusercontent.com/albertzarate/WorldHappinessNarrative/master/data/world_happiness_2021.csv';

  const row = d => {
    d.Score = +d['Score'];
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const csvUrl$1 =
    'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.csv';

  const useCodes = () => {
    const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      d3.csv(csvUrl$1).then(setData);
    }, []);

    return data;
  };

  const csvUrl$2 =
    'https://raw.githubusercontent.com/albertzarate/WorldHappinessNarrative/master/data/world_happiness_2021.csv';

  const useDataBar = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.Score = +d['Score'];
        return d;
      };
      d3.csv(csvUrl$2, row).then(data => {
        setData(data.slice(0, 10));
      });
    }, []);
    
    return data;
  };

  const useDataBarReverse = () => {
      const [data, setData] = React$1.useState(null);
    
      React$1.useEffect(() => {
        const row = d => {
          d.Score = +d['Score'];
          return d;
        };
        d3.csv(csvUrl$2, row).then(data => {
          setData(data.slice(-10,));
        });
      }, []);
      
      return data;
    };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();

  const missingDataColor = 'lightgray';

  const Marks = ({
    worldAtlas: { countries, interiors },
    rowByNumericCode,
    colorScale,
    colorValue
  }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      countries.features.map(feature => {
        const d = rowByNumericCode.get(feature.id);
        if(!d){
          console.log(feature.properties.name);
        }
        return (
          React.createElement( 'path', {
            fill: d ? colorScale(colorValue(d)) : missingDataColor, d: path(feature) })
        );
      }),
      React.createElement( 'path', { className: "interiors", d: path(interiors) })
    )
  );

  const BarMarks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    tooltipFormat
  }) =>
    data.map(d => (
      React.createElement( 'rect', {
        className: "mark", key: yValue(d), x: 0, y: yScale(yValue(d)), width: xScale(xValue(d)), height: yScale.bandwidth() },
        React.createElement( 'title', null, "Score: "+tooltipFormat(xValue(d)) )
      )
    ));

  const AxisBottom = ({ xScale, innerHeight, tickFormat }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 3 },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale }) =>
    yScale.domain().map(tickValue => (
      React.createElement( 'g', { className: "tick" },
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -3, dy: ".32em", y: yScale(tickValue) + yScale.bandwidth() / 2 },
          tickValue
        )
      )
    ));

  const width = 1200;
  const height = 750;
  const mapMargin = { top: 0, right: 30, bottom: 65, left: 85 };
  const graphMargin = { top: 0, right: 90, bottom: 270, left: 120 };
  const xAxisLabelOffset = 50;

  const App = () => {
    // map
    const worldAtlas = useWorldAtlas();
    const data = useData();
    const codes = useCodes();

    if (!worldAtlas || !data || !codes) {
      return React$1__default.createElement( 'pre', null, "Loading Visualization..." );
    }
    
    const numericCodeByAlphaCode = new Map();
    codes.forEach(code => {
      const alpha3Code = code['alpha-3'];
      const numericCode = code['country-code'];
      numericCodeByAlphaCode.set(alpha3Code, numericCode);
    });
    
    const rowByNumericCode = new Map();
    data.forEach(d => {
      const alpha3Code = d.Code;
      const numericCode = numericCodeByAlphaCode.get(alpha3Code);
      rowByNumericCode.set(numericCode, d);
    });

    const colorValue = d => d.Score;

    const colorScale = d3.scaleSequential(d3.interpolateSpectral).domain([
      4,
      d3.max(data, colorValue)
    ]);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${mapMargin.left},${mapMargin.top})` },
          React$1__default.createElement( Marks, {
            worldAtlas: worldAtlas, rowByNumericCode: rowByNumericCode, colorScale: colorScale, colorValue: colorValue })
        )
      )
    );
  };

  const MakeGraph = () => {
    // graph happy
    const data = useDataBar();

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - graphMargin.top - graphMargin.bottom;
    const innerWidth = width - graphMargin.left - graphMargin.right;

    const yValue = d => d['Country'];
    const xValue = d => d.Score;

    const siFormat = d3.format('.2s');
    const xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');

    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .paddingInner(0.15);

    const xScale = d3.scaleLinear()
      .domain([0, 10])
      .range([0, innerWidth]);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${graphMargin.left},${graphMargin.top})` },
          React$1__default.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, { yScale: yScale }),
          React$1__default.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" }, "Score"),
          React$1__default.createElement( BarMarks, {
            data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: xAxisTickFormat })
        )
      )
    );
  };

  const MakeGraph2 = () => {
    // graph happy
    const data = useDataBarReverse();

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - graphMargin.top - graphMargin.bottom;
    const innerWidth = width - graphMargin.left - graphMargin.right;

    const yValue = d => d['Country'];
    const xValue = d => d.Score;

    const siFormat = d3.format('.2s');
    const xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');

    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .paddingInner(0.15);

    const xScale = d3.scaleLinear()
      .domain([0, 10])
      .range([0, innerWidth]);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${graphMargin.left},${graphMargin.top})` },
          React$1__default.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, { yScale: yScale }),
          React$1__default.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" }, "Score"),
          React$1__default.createElement( BarMarks, {
            data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: xAxisTickFormat })
        )
      )
    );
  };

  ReactDOM.render(
    React$1__default.createElement( 'div', null,
      React$1__default.createElement( 'svg', { width: width, height: height-600, id: "svg1" }),
      React$1__default.createElement( App, null ), "," ), document.getElementById('root')
  );
  ReactDOM.render(
    React$1__default.createElement( 'div', null,
      React$1__default.createElement( 'svg', { width: width, height: height-600, id: "svg2" }),
      React$1__default.createElement( MakeGraph, null ), "," ), document.getElementById('root2')
  );
  ReactDOM.render(
    React$1__default.createElement( 'div', null,
      React$1__default.createElement( 'svg', { width: width, height: height-600, id: "svg3" }),
      React$1__default.createElement( MakeGraph2, null ), "," ), document.getElementById('root3')
  );

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,